using SqlFu.Internals;
using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SqlFu
{
    public static class CrudHelpersAsync
    {
        /// <summary>
        /// Inserts into database
        /// </summary>
        /// <param name="db"></param>
        /// <param name="table">Table name</param>
        /// <param name="data">Column and Values</param>
        /// <param name="idIsIdentity">By default if the object has an Id property, it's considered to be autoincremented</param>
        /// <returns></returns>
        public static async Task<LastInsertId> InsertAsync(this DbConnection db, string table, object data, bool idIsIdentity = true)
        {
            table.MustNotBeEmpty();
            data.MustNotBeNull();
            var ti = new TableInfo(table);
            ti.AutoGenerated = idIsIdentity;
            var provider = db.GetProvider();
            LastInsertId rez;
            using (var st = CrudHelpers.Insert(db, ti, data))
            {
                st.Reusable = true;
                rez = await provider.ExecuteInsertAsync(st.Command, ti.PrimaryKey);
            }
            return rez;
        }

        public static async Task<LastInsertId> InsertAsync<T>(this DbConnection db, T data) where T : class
        {
            data.MustNotBeNull();
            var provider = db.GetProvider();
            var tableInfo = TableInfo.ForType(typeof(T));
            LastInsertId rez;
            using (var st = CrudHelpers.Insert(db, tableInfo, data))
            {
                st.Reusable = true;
                rez = await provider.ExecuteInsertAsync(st.Command, tableInfo.PrimaryKey);
            }
            return rez;
        }

        /// <summary>
        /// If both poco has id property and the Id arg is specified, the arg is used
        /// </summary>
        /// <param name="db"></param>
        /// <param name="table"></param>
        /// <param name="data"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public static async Task<int> UpdateAsync(this DbConnection db, string table, object data, object id = null)
        {
            var ti = new TableInfo(table);
            var p = CrudHelpers.Update(db, ti, data, id);
            return await db.ExecuteAsync(p.Sql, p.Args);
        }

        /// <summary>
        /// If both poco has id property and the Id arg is specified, the arg is used
        /// </summary>
        public static async Task<int> UpdateAsync<T>(this DbConnection db, T data, object id = null)
        {
            var ti = TableInfo.ForType(typeof(T));
            var p = CrudHelpers.Update(db, ti, data, id);
            return await db.ExecuteAsync(p.Sql, p.Args);
        }

        public static async Task<int> UpdateWhereColumnAsync(this DbConnection db, string tableName, object data, string colName,
                                            object columnValue)
        {
            tableName.MustNotBeEmpty();
            colName.MustNotBeEmpty();
            columnValue.MustNotBeNull();
            var p = CrudHelpers.Update(db, new TableInfo(tableName), data, columnValue, colName);
            return await db.ExecuteAsync(p.Sql, p.Args);
        }
    }
}
